# This file serves as an example for setting up your environment variables.
# Copy this file to `.env` (or `docker-compose.prod.env` for production)
# and fill in your actual, secure values.
#
# IMPORTANT: Do NOT commit your actual .env file with sensitive data to
# version control (e.g., Git)! Use this .env.example as a template.

# --- Database Configuration ---
# PostgreSQL database user for your application
POSTGRES_USER=postgres
# Secure password for the PostgreSQL user. GENERATE A STRONG, UNIQUE PASSWORD!
POSTGRES_PASSWORD=your_secure_production_password_here
# Name of the PostgreSQL database for your application
POSTGRES_DB=osint_production_db

# Full database connection URL for your application (e.g., for SQLAlchemy)
# Ensure the username, password, host, port, and database name match your setup.
# 'db' typically refers to the PostgreSQL service name in docker-compose.yml.
DATABASE_URL=postgresql://postgres:your_secure_production_password_here@db:5432/osint_production_db

# --- Security & Authentication ---
# A very strong, random secret key for JWT (JSON Web Tokens).
# This should be a long, complex string, ideally at least 256 bits (32 bytes)
# encoded in hex. You can generate one with: openssl rand -hex 32
JWT_SECRET_KEY=your_very_secure_jwt_secret_key_here_minimum_256_bits
# A strong, random encryption key for any sensitive data encryption.
# Generate with: openssl rand -hex 32 or similar secure method.
ENCRYPTION_KEY=your_encryption_key_here

# --- Service Communication & API Configuration ---
# The name of the Docker container running your security tools service.
# This should match the 'container_name' in your docker-compose.yml for the tools service.
TOOLS_CONTAINER_NAME=security-tools

# Host for your API service. Use 0.0.0.0 for Docker containers to be accessible externally.
API_HOST=0.0.0.0
# Port on which your API service will listen.
API_PORT=8000
# Set to 'true' for development, 'false' for production.
# Disable in production for performance and security.
DEBUG=false

# --- Docker Hub & Deployment ---
# Your Docker Hub username. This is used if you are pulling private images
# or displaying image ownership.
DOCKER_HUB_USERNAME=1122335588