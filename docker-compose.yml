version: '3.8'

services:
  db:
    build:
      context: ./database
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
      POSTGRES_APP_USER: postgres
      POSTGRES_APP_PASSWORD: password
      POSTGRES_ADMIN_USERNAME: postgres
      POSTGRES_ADMIN_PASSWORD: password
      POSTGRES_ADMIN_EMAIL: admin@example.com
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  tools:
    build:
      context: ./tools
      dockerfile: Dockerfile
    container_name: security-tools
    volumes:
      - shared-data:/home/tools/shared
    networks:
      - app-network
    restart: always
    command: tail -f /dev/null  # Keep container running
    healthcheck:
      test: ["CMD", "which", "amass"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - TOOLS_CONTAINER_NAME=security-tools
    volumes:
      - shared-data:/home/app/shared
      - ./tools:/home/app/tools
      - /var/run/docker.sock:/var/run/docker.sock
    group_add:
    - "0" 
    depends_on:
      db:
        condition: service_healthy
      tools:
        condition: service_healthy
    networks:
      - app-network
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - app-network
    restart: always

volumes:
  pgdata:
    driver: local
  shared-data:
    driver: local

networks:
  app-network:
    driver: bridge